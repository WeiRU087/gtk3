diff --git a/gtk/gtkplacessidebar.c b/gtk/gtkplacessidebar.c
index b8d5985..8ab06f0 100644
--- a/gtk/gtkplacessidebar.c
+++ b/gtk/gtkplacessidebar.c
@@ -907,7 +907,7 @@ update_places (GtkPlacesSidebar *sidebar)
   GDrive *drive;
   GList *volumes;
   GVolume *volume;
-  GSList *bookmarks, *sl;
+//  GSList *bookmarks, *sl;
   gint index;
   gchar *original_uri, *mount_uri, *name, *identifier;
   GtkListBoxRow *selected;
@@ -1011,7 +1011,7 @@ update_places (GtkPlacesSidebar *sidebar)
     }
 
   /* Application-side shortcuts */
-  add_application_shortcuts (sidebar);
+//  add_application_shortcuts (sidebar);
 
   /* go through all connected drives */
   drives = g_volume_monitor_get_connected_drives (sidebar->volume_monitor);
@@ -1182,17 +1182,17 @@ update_places (GtkPlacesSidebar *sidebar)
   g_list_free (volumes);
 
   /* file system root */
-  if (!sidebar->show_other_locations)
-    {
-      mount_uri = "file:///"; /* No need to strdup */
-      icon = g_themed_icon_new_with_default_fallbacks (ICON_NAME_FILESYSTEM);
-      add_place (sidebar, PLACES_BUILT_IN,
-                 SECTION_MOUNTS,
-                 sidebar->hostname, icon, mount_uri,
-                 NULL, NULL, NULL, 0,
-                 _("Open the contents of the file system"));
-      g_object_unref (icon);
-    }
+//  if (!sidebar->show_other_locations)
+//    {
+//      mount_uri = "file:///"; /* No need to strdup */
+//      icon = g_themed_icon_new_with_default_fallbacks (ICON_NAME_FILESYSTEM);
+//      add_place (sidebar, PLACES_BUILT_IN,
+//                 SECTION_MOUNTS,
+//                 sidebar->hostname, icon, mount_uri,
+//                 NULL, NULL, NULL, 0,
+//                 _("Open the contents of the file system"));
+//      g_object_unref (icon);
+//    }
 
   /* add mounts that has no volume (/etc/mtab mounts, ftp, sftp,...) */
   mounts = g_volume_monitor_get_mounts (sidebar->volume_monitor);
@@ -1239,47 +1239,47 @@ update_places (GtkPlacesSidebar *sidebar)
   g_list_free (mounts);
 
   /* add bookmarks */
-  bookmarks = _gtk_bookmarks_manager_list_bookmarks (sidebar->bookmarks_manager);
-
-  for (sl = bookmarks, index = 0; sl; sl = sl->next, index++)
-    {
-      gboolean is_native;
-      BookmarkQueryClosure *clos;
-
-      root = sl->data;
-      is_native = g_file_is_native (root);
-
-      if (_gtk_bookmarks_manager_get_is_builtin (sidebar->bookmarks_manager, root))
-        continue;
-
-      if (sidebar->local_only && !is_native)
-        continue;
-
-      clos = g_slice_new (BookmarkQueryClosure);
-      clos->sidebar = sidebar;
-      clos->index = index;
-      clos->is_native = is_native;
-      g_file_query_info_async (root,
-                               "standard::display-name,standard::symbolic-icon",
-                               G_FILE_QUERY_INFO_NONE,
-                               G_PRIORITY_DEFAULT,
-                               sidebar->cancellable,
-                               on_bookmark_query_info_complete,
-                               clos);
-    }
-
-  g_slist_free_full (bookmarks, g_object_unref);
-
-  /* Add new bookmark row */
-  new_bookmark_icon = g_themed_icon_new ("bookmark-new-symbolic");
-  sidebar->new_bookmark_row = add_place (sidebar, PLACES_DROP_FEEDBACK,
-                                         SECTION_BOOKMARKS,
-                                         _("New bookmark"), new_bookmark_icon, NULL,
-                                         NULL, NULL, NULL, 0,
-                                         _("Add a new bookmark"));
-  context = gtk_widget_get_style_context (sidebar->new_bookmark_row);
-  gtk_style_context_add_class (context, "sidebar-new-bookmark-row");
-  g_object_unref (new_bookmark_icon);
+//  bookmarks = _gtk_bookmarks_manager_list_bookmarks (sidebar->bookmarks_manager);
+//
+//  for (sl = bookmarks, index = 0; sl; sl = sl->next, index++)
+//    {
+//      gboolean is_native;
+//      BookmarkQueryClosure *clos;
+//
+//      root = sl->data;
+//      is_native = g_file_is_native (root);
+//
+//      if (_gtk_bookmarks_manager_get_is_builtin (sidebar->bookmarks_manager, root))
+//        continue;
+//
+//      if (sidebar->local_only && !is_native)
+//        continue;
+//
+//      clos = g_slice_new (BookmarkQueryClosure);
+//      clos->sidebar = sidebar;
+//      clos->index = index;
+//      clos->is_native = is_native;
+//      g_file_query_info_async (root,
+//                               "standard::display-name,standard::symbolic-icon",
+//                               G_FILE_QUERY_INFO_NONE,
+//                               G_PRIORITY_DEFAULT,
+//                               sidebar->cancellable,
+//                               on_bookmark_query_info_complete,
+//                               clos);
+//    }
+//
+//  g_slist_free_full (bookmarks, g_object_unref);
+//
+//  /* Add new bookmark row */
+//  new_bookmark_icon = g_themed_icon_new ("bookmark-new-symbolic");
+//  sidebar->new_bookmark_row = add_place (sidebar, PLACES_DROP_FEEDBACK,
+//                                         SECTION_BOOKMARKS,
+//                                         _("New bookmark"), new_bookmark_icon, NULL,
+//                                         NULL, NULL, NULL, 0,
+//                                         _("Add a new bookmark"));
+//  context = gtk_widget_get_style_context (sidebar->new_bookmark_row);
+//  gtk_style_context_add_class (context, "sidebar-new-bookmark-row");
+//  g_object_unref (new_bookmark_icon);
 
   /* network */
   if (!sidebar->local_only)
@@ -1361,7 +1361,8 @@ update_places (GtkPlacesSidebar *sidebar)
 
   gtk_widget_show_all (GTK_WIDGET (sidebar));
   /* We want this hidden by default, but need to do it after the show_all call */
-  gtk_sidebar_row_hide (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row), TRUE);
+  if (sidebar->new_bookmark_row != NULL)
+    gtk_sidebar_row_hide (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row), TRUE);
 
   /* restore original selection */
   if (original_uri)
@@ -1515,7 +1516,8 @@ start_drop_feedback (GtkPlacesSidebar *sidebar,
 {
   if (sidebar->drag_data_info != DND_GTK_SIDEBAR_ROW)
     {
-      gtk_sidebar_row_reveal (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row));
+      if (sidebar->new_bookmark_row != NULL)
+        gtk_sidebar_row_reveal (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row));
       /* If the state is permanent, don't change it. The application controls it. */
       if (sidebar->drop_state != DROP_STATE_NEW_BOOKMARK_ARMED_PERMANENT)
         sidebar->drop_state = DROP_STATE_NEW_BOOKMARK_ARMED;
@@ -1993,7 +1995,8 @@ drag_leave_callback (GtkWidget      *widget,
   if (sidebar->drop_state != DROP_STATE_NEW_BOOKMARK_ARMED_PERMANENT)
     {
       update_possible_drop_targets (sidebar, FALSE, context);
-      gtk_sidebar_row_hide (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row), FALSE);
+      if (sidebar->new_bookmark_row != NULL)
+        gtk_sidebar_row_hide (GTK_SIDEBAR_ROW (sidebar->new_bookmark_row), FALSE);
       sidebar->drop_state = DROP_STATE_NORMAL;
     }
 
